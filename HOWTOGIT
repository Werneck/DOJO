GIT & GITHUB OMGWTFBBQ!!1? P1
--------------------------------------
HOWTO BY ANNA (anna.claudia@gmail.com)


1.0 INTRODUÇÃO
    Aparências enganam. Entender e manipular arquivos com o GIT é mais fácil do que aparenta.
    A idéia desse HOWTO foi reunir os passos essenciais para o funcionamento do GIT. Assim, podemos nos adaptar aos comandos iniciais e posteriormente incentivar outros grupos a ficarem mais influentes com os commits. :)
    Let's get started!


2.0 AFINAL, O QUE É O GIT?
GIT é um SOFTWARE LIVRE para controle de versão DISTRIBUÍDO. O que significa dizer que mesmo com um fluxo de trabalho centralizado, cada usuário tem um backup completo do servidor principal. Tudo é LOCAL.
GIT É RÁPIDO, LEVE E FÁCIL DE APRENDER!


"Cada diretório de trabalho é um repositório com todos os históricos e habilidade total de controle das revisões não dependente de acesso a uma rede ou a um servidor central."

    2.1 PUXANDO O SACO
        Só pra constar, procurem quem foi o desenvolvedor do GIT! :D


3.0 PRIMEIROS PASSOS
    3.1 INSTALAÇÃO 
        CM01 $ sudo apt-get install git-core git-doc git-gui
        
    3.2 INICIAÇÃO
        Crie uma conta no GITHUB.
        
        
4.0 GERANDO UMA CHAVE SSH (SECURE SHELL)
    4.1 O QUÊ?
        SSH é um protocolo de rede que permite que dados sejam trocados entre redes diversas através de um canal seguro.
        
    4.2 ALGUMAS PRECAUÇÕES
        Primeiramente, devemos checar a existência de chaves em nosso computador para que outras, porventura, não as venham sobrepor. 
        Navegue até a pasta mostrada em CM02. Caso o diretório não for encontrado, sem problemas, simplesmente crie-o. Caso contrário, remova os arquivos existentes no mesmo caso tenha certeza não serem necessários. 
        Aqui, um CUIDADO especial: na pasta ~/.ssh são utilizadas chaves com nomes padrão! Portanto, um backup é muito bem-vindo em caso de dúvidas (CM03/CM06).
        
       CM02 $ cd ~/.ssh
       
       CM03 $ ls
       CM04 $ mkdir key_backup
       CM05 $ cp id_rsa* key_backup
       CM06 $ rm id_rsa*
       
    4.3 FINALMENTE, COMO GERAR MINHA CHAVE?
       NOTA: esse passo pode ser pulado caso alguma chave já existente vá ser utilizada.
       
       Agora que temos certeza de que o SSH não vai utilizar uma chave pré-existente, podemos criar novas. 
       Navegue até a pasta mostrada em CM02 e utilize o comando CM07:
       CM07 $ ssh-keygen -t rsa -C "seuemail@seudominio.com"
       
       Após digitar o comando acima com o e-mail utilizado para cadastro no GITHUB, aparecerão as seguintes mensagens:
       MSG01 "Enter file in which to save the key", onde deverá ser digitado simplesmente um nome para um arquivo onde será guardada sua chave;
       MSG02 "Enter passphrase", campo onde deverá ser digitada a senha desse arquivo e pode ser deixado em branco caso nenhuma seja necessária (é dever de todo internauta utilizar uma boa senha!);
       MSG03 "Enter passphrase again", aqui, a repetição da mesma.
       
       Parabéns, seu par de chaves RSA foi criado. :)
       
       4.3.1 ESPERA! O QUE É ESSE PAR DE CHAVES RSA?
          Basicamente, RSA é um dos mais seguros algoritmos de criptografia de dados existentes e envolve sempre um par de chaves: a pública, que pode ser conhecida e a privada, que deve ser mantida em sigilo.


5.0 ADICIONANDO A CHAVE EM SUA CONTA NO GITHUB
    Agora que já foram criadas as chaves necessárias, precisamos adicioná-las à nossa conta no GITHUB.
    Primeiramente, vamos copiar nossa chave: navegue até a pasta onde foram criadas as chaves, abra o arquivo público (nomedoseuarquivo.pub) e copie o que no mesmo estiver escrito.
    
    CM02 ~/.ssh
    CM07 ls
    CM08 gedit nomedoseuarquivoarquivo.pub
    
    Faça seu login no site. Acesse: "Account Settings" > "SSH Public Keys" > "Add another public key".
    Escolha um nome qualquer para o campo "Título" e em "Key" cole a SSH-RSA que acabou de ser copiada. 


6.0 TESTANDO A CONEXÃO COM O GITHUB
Aqui acontece a adição do GITHUB na lista de hosts conhecidos. 
Caso seja a primeira tentativa de conhexão, faça sua autenticação digitando a senha escolhida durante o passo 4.3.

CM09 $ ssh git@github.com


6.0 CONFIGURAÇÕES LOCAIS
O GIT necessita saber seu nome de usuário e seu e-mail para propriamente creditar seus commits. Trate de arrumá-los! :P
CM10 $ git config --global user.name "SEU NOME DE USUÁRIO"
CM11 CM07$ git config --global user.email "seuemail@seudominio.com"


7.0 CRIANDO UM REPOSITÓRIO NO GITHUB
No site do GITHUB, acesse: "Dashboard" > "New Repository". Escolha um nome para o seu projeto e... pronto!

    7.1 E AGORA, ONDE FICARÃO MEUS ARQUIVOS?
        Criado o repositório no site, crie uma pasta com o mesmo nome em seu computador. Esse será seu repositório local.
        
        CM12 $ mkdir NOMEPROJETO


8.0 O PRIMEIRO COMMIT
Primeiramente, vá até seu repositório local e inicialize o GIT. Utilize CM15 como modelo para adição de arquivos específicos no repositório ou então faça uso do CM16 para adicionar todos os arquivos.

CM13 $ cd NOMEPROJETO
CM14 $ git init
CM15 $ git add ./ARQUIVO1 ARQUIVO2 ARQUIVO3
CM16 $ git add .

Após feita a marcação de arquivos a serem enviados ao repositório (CM15/CM16), é necessário fazer uso do commit:
CM17 $ git commit -m 'uma mensagem qualquer vem aqui'

Aponte para o repositório do GITHUB:
CM18 $ git remote add origin git@github.com:nomedecadastronosite/NOMEPROJETO.git
LEMBRETE: NOMEPROJETO é o nome do repositório criado na seção 7.1.

E, finalmente... envie os arquivos para o servidor:
CM19 $ git push origin master


9.0 CONSIDERAÇÕES FINAIS
So long, and thanks for all the fish. :)


10.0 REFERÊNCIAS E OUTROS SITES INTERESSANTES
ST01 www.akitaonrails.com/2008/10/02/entendendo-git-e-instalando-gitorious-git-via-web
ST02 b.lesseverything.com/2008/3/25/got-git-howto-git-and-github
ST03 www.kernel.org/pub/software/scm/git/docs/user-manual.html
ST04 www.kernel.org/pub/software/scm/git/docs/everyday.html
ST05 sysmonblog.co.uk/misc/git_by_example/
ST06 help.github.com/git-cheat-sheets/
ST07 people.gnome.org/~newren/eg/
ST08 git.oz.cz/course/svn.html
ST09 mono-project.com/GitFAQ
ST10 help.github.com


11.0 POST-SCRIPTUM
A seção 10.0 não está ali só de enfeite. Aproveitem!:P
      
